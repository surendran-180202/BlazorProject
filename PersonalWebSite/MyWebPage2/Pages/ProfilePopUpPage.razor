
@foreach(var i in ListUserInfo)
{
    <div class="ManageInfo">

        <div class="row">
            <div class="col-md-6">
                <div class="editContent">

                    <center>
                        <input type="text" placeholder="Enter your name" @bind-value="i.NAME" /><br />
                        <input type="text" placeholder="Enter your Lastname" @bind-value="i.LASTNAME" /><br />
                        <input type="date" placeholder="Enter DOB" @bind-value="i.BIRTHDAY" />

                        <select>
                            <option value="None">Gender</option>
                            <option value="Male">Male</option>
                            <option value="Female">Female</option>
                            <option value="Other">Other</option>
                        </select><br />

                        <input type="number" placeholder="Enter your Phone" @bind-value="i.PHONE" /><br />
                        <input type="email" placeholder="Enter your Email" @bind-value="i.EMAIL" /><br />
                        <textarea class="address" rows="3" cols="23" placeholder="Please enter Address..." value="@i.ADDRESS" /><br />
                        <button class="SubmitBtn" @onclick="upDatePersonalInfo">Update</button>
                    </center>

                </div>
            </div>

            <div class="col-md-6">
                <div class="editContent1">
                    <center>
                        <div class="profilePhoto"> <img src="@($"data:image/png;base64,{Convert.ToBase64String(i.USERIMAGE)}")" class="image" /></div>
                     
                            <div class="profilePhoto">
                            <img src="@FileSource" class="image" />

                        </div>
                        <InputFile OnChange="OnInputFileChange" directory accept="image/*" />
                        <button @onclick="updateUserInfo">Conform UpLode</button>
                    </center>

                    @*   <div class="letter-image">
                <div class="animated-mail">
                <div class="back-fold"></div>
                <div class="letter">
                <div class="letter-border"></div>
                <div class="letter-title"></div>
                <div class="letter-context"></div>
                <div class="letter-stamp">
                <div class="letter-stamp-inner"></div>
                </div>
                </div>
                <div class="top-fold"></div>
                <div class="body"></div>
                <div class="left-fold"></div>
                </div>
                <div class="shadow"></div>
                </div>*@
                </div>
            </div>
        </div>
    </div>
}

@code {
 


    List<tblUserInfo>? ListUserInfo = new List<tblUserInfo>();
    public string? FileSource { get; set; }
    public string? Imagepath { get; set; }
    IReadOnlyList<IBrowserFile> selectedFiles;
    private string Filepath { get; set; }


    protected override async Task OnInitializedAsync()
    {
        ListUserInfo = userService.GetPersonalInfo();

    }
    private void OnInputFileChange(InputFileChangeEventArgs e)
    {
        selectedFiles = e.GetMultipleFiles();
        this.StateHasChanged();
        CopyFile();
    }
    private async void CopyFile()
    {
        foreach(var file in selectedFiles)
        {
            Stream stream = file.OpenReadStream();
            var path = $"{Environment.WebRootPath}\\Storage\\{file.Name}";
            FileStream fs = File.Create(path);
            await stream.CopyToAsync(fs);
            stream.Close();
            fs.Close();
            Imagepath = path;
            FileSource =  $"Storage\\{file.Name}";
        }
        this.StateHasChanged();

    }
    private void updateUserInfo()
    {
        userService.UpdateUserInfo(Imagepath);
    }
    private void upDatePersonalInfo()
    {
        //string a= tblUserInfo;
    }


}
