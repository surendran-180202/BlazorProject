@if(show)
{
<form>    
<div class="form-popup">
    <button type="button" class="cancelbtn" @onclick=cancelRegister><i class="fa fa-plus-circle" style="transform: rotate(45deg);color:lightcoral;"></i></button>
        <div class="form-container">
            <h4>Register</h4>
            <input type="text" placeholder="Enter Your Name" @bind="_user.USERNAME">
            <input type="email" placeholder="Enter Your Email" @bind="_user.EMAIL">
            <input type="text" placeholder="Enter Your Phone Number" @bind="_user.PHONE">
            <input type="password" placeholder="enter your password" @bind="_user.PASSWORD">
            <input type="@passwordClass" placeholder="Conform password" @bind="ConformPassword">
            <i class="far fa-eye" style=" cursor: pointer;margin-left:90%;" @onclick="show_password"></i>
            <center>
                <input type="submit" value="submit" @onclick="NewUser">
            </center>
        </div>
    </div>

    </form>
}

@code {
    tblUser _user = new tblUser();
    private string? ConformPassword { get; set; }
    private string? passwordClass { get; set; }

    [Parameter]
    public EventCallback<bool> OnRegister { get; set; }
    protected bool IsTrue { get; set; }

    [Parameter]
    public EventCallback<bool> Oncancel { get; set; }
    protected bool IsCancel { get; set; }



    [Parameter]
    public bool show { get; set; }



    protected override void OnInitialized()
    {
        passwordClass = "password";
    }
    private void show_password()
    {
        if(passwordClass == "password") passwordClass = "text";
        else passwordClass = "password";
    }
    private void NewUser()
    {
        if(_user.PASSWORD.Equals(ConformPassword) && Validation.EmailValidation(_user.EMAIL))
        {
            userService.Create(_user);
            OnUserRegister();
        }
    }
    protected async Task OnUserRegister()
    {
        IsTrue = true;
        await OnRegister.InvokeAsync(IsTrue);
    }

    private async Task cancelRegister()
    {
        IsCancel = true;
        await Oncancel.InvokeAsync(IsCancel);
    }



}
